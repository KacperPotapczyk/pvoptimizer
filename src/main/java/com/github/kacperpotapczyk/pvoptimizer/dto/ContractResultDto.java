/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ContractResultDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2592763226448500138L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContractResultDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Contract id\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Contract name\"},{\"name\":\"power\",\"type\":{\"type\":\"array\",\"items\":[\"double\"]},\"doc\":\"Result power profile\"},{\"name\":\"energy\",\"type\":{\"type\":\"array\",\"items\":[\"double\"]},\"doc\":\"Result energy profile\"},{\"name\":\"cost\",\"type\":{\"type\":\"array\",\"items\":[\"double\"]},\"doc\":\"Result cost/income profile\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ContractResultDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContractResultDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ContractResultDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ContractResultDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ContractResultDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ContractResultDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ContractResultDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ContractResultDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ContractResultDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Contract id */
  private long id;
  /** Contract name */
  private java.lang.CharSequence name;
  /** Result power profile */
  private java.util.List<java.lang.Object> power;
  /** Result energy profile */
  private java.util.List<java.lang.Object> energy;
  /** Result cost/income profile */
  private java.util.List<java.lang.Object> cost;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContractResultDto() {}

  /**
   * All-args constructor.
   * @param id Contract id
   * @param name Contract name
   * @param power Result power profile
   * @param energy Result energy profile
   * @param cost Result cost/income profile
   */
  public ContractResultDto(java.lang.Long id, java.lang.CharSequence name, java.util.List<java.lang.Object> power, java.util.List<java.lang.Object> energy, java.util.List<java.lang.Object> cost) {
    this.id = id;
    this.name = name;
    this.power = power;
    this.energy = energy;
    this.cost = cost;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return power;
    case 3: return energy;
    case 4: return cost;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: power = (java.util.List<java.lang.Object>)value$; break;
    case 3: energy = (java.util.List<java.lang.Object>)value$; break;
    case 4: cost = (java.util.List<java.lang.Object>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Contract id
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Contract id
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Contract name
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Contract name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'power' field.
   * @return Result power profile
   */
  public java.util.List<java.lang.Object> getPower() {
    return power;
  }


  /**
   * Sets the value of the 'power' field.
   * Result power profile
   * @param value the value to set.
   */
  public void setPower(java.util.List<java.lang.Object> value) {
    this.power = value;
  }

  /**
   * Gets the value of the 'energy' field.
   * @return Result energy profile
   */
  public java.util.List<java.lang.Object> getEnergy() {
    return energy;
  }


  /**
   * Sets the value of the 'energy' field.
   * Result energy profile
   * @param value the value to set.
   */
  public void setEnergy(java.util.List<java.lang.Object> value) {
    this.energy = value;
  }

  /**
   * Gets the value of the 'cost' field.
   * @return Result cost/income profile
   */
  public java.util.List<java.lang.Object> getCost() {
    return cost;
  }


  /**
   * Sets the value of the 'cost' field.
   * Result cost/income profile
   * @param value the value to set.
   */
  public void setCost(java.util.List<java.lang.Object> value) {
    this.cost = value;
  }

  /**
   * Creates a new ContractResultDto RecordBuilder.
   * @return A new ContractResultDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder();
  }

  /**
   * Creates a new ContractResultDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContractResultDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder(other);
    }
  }

  /**
   * Creates a new ContractResultDto RecordBuilder by copying an existing ContractResultDto instance.
   * @param other The existing instance to copy.
   * @return A new ContractResultDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for ContractResultDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContractResultDto>
    implements org.apache.avro.data.RecordBuilder<ContractResultDto> {

    /** Contract id */
    private long id;
    /** Contract name */
    private java.lang.CharSequence name;
    /** Result power profile */
    private java.util.List<java.lang.Object> power;
    /** Result energy profile */
    private java.util.List<java.lang.Object> energy;
    /** Result cost/income profile */
    private java.util.List<java.lang.Object> cost;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.power)) {
        this.power = data().deepCopy(fields()[2].schema(), other.power);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.energy)) {
        this.energy = data().deepCopy(fields()[3].schema(), other.energy);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.cost)) {
        this.cost = data().deepCopy(fields()[4].schema(), other.cost);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ContractResultDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.power)) {
        this.power = data().deepCopy(fields()[2].schema(), other.power);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.energy)) {
        this.energy = data().deepCopy(fields()[3].schema(), other.energy);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cost)) {
        this.cost = data().deepCopy(fields()[4].schema(), other.cost);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Contract id
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Contract id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Contract id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Contract id
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Contract name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Contract name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Contract name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Contract name
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'power' field.
      * Result power profile
      * @return The value.
      */
    public java.util.List<java.lang.Object> getPower() {
      return power;
    }


    /**
      * Sets the value of the 'power' field.
      * Result power profile
      * @param value The value of 'power'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder setPower(java.util.List<java.lang.Object> value) {
      validate(fields()[2], value);
      this.power = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'power' field has been set.
      * Result power profile
      * @return True if the 'power' field has been set, false otherwise.
      */
    public boolean hasPower() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'power' field.
      * Result power profile
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder clearPower() {
      power = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy' field.
      * Result energy profile
      * @return The value.
      */
    public java.util.List<java.lang.Object> getEnergy() {
      return energy;
    }


    /**
      * Sets the value of the 'energy' field.
      * Result energy profile
      * @param value The value of 'energy'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder setEnergy(java.util.List<java.lang.Object> value) {
      validate(fields()[3], value);
      this.energy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'energy' field has been set.
      * Result energy profile
      * @return True if the 'energy' field has been set, false otherwise.
      */
    public boolean hasEnergy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'energy' field.
      * Result energy profile
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder clearEnergy() {
      energy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'cost' field.
      * Result cost/income profile
      * @return The value.
      */
    public java.util.List<java.lang.Object> getCost() {
      return cost;
    }


    /**
      * Sets the value of the 'cost' field.
      * Result cost/income profile
      * @param value The value of 'cost'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder setCost(java.util.List<java.lang.Object> value) {
      validate(fields()[4], value);
      this.cost = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'cost' field has been set.
      * Result cost/income profile
      * @return True if the 'cost' field has been set, false otherwise.
      */
    public boolean hasCost() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'cost' field.
      * Result cost/income profile
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractResultDto.Builder clearCost() {
      cost = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContractResultDto build() {
      try {
        ContractResultDto record = new ContractResultDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.power = fieldSetFlags()[2] ? this.power : (java.util.List<java.lang.Object>) defaultValue(fields()[2]);
        record.energy = fieldSetFlags()[3] ? this.energy : (java.util.List<java.lang.Object>) defaultValue(fields()[3]);
        record.cost = fieldSetFlags()[4] ? this.cost : (java.util.List<java.lang.Object>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContractResultDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContractResultDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContractResultDto>
    READER$ = (org.apache.avro.io.DatumReader<ContractResultDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










