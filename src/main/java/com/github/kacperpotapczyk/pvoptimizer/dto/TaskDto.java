/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaskDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9215476160592666874L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskDto\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Task identifier\"},{\"name\":\"timeoutSeconds\",\"type\":\"long\",\"doc\":\"Time after which optimization has to stop.\",\"default\":0},{\"name\":\"relativeGap\",\"type\":\"double\",\"doc\":\"Relative gap below which optimization has to stop.\",\"default\":0},{\"name\":\"intervals\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Time length of task intervals.\"},{\"name\":\"production\",\"type\":{\"type\":\"record\",\"name\":\"ProductionDto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Production id\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Production name\"},{\"name\":\"productionProfile\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Production profile\"}]},\"doc\":\"PV installation power output.\"},{\"name\":\"demand\",\"type\":{\"type\":\"record\",\"name\":\"DemandDto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Demand id\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Demand name\"},{\"name\":\"demandProfile\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Demand profile\"}]},\"doc\":\"Household power demand.\"},{\"name\":\"contracts\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"ContractDto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Contract id\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Contract name\"},{\"name\":\"contractDirection\",\"type\":{\"type\":\"enum\",\"name\":\"ContractDirectionDto\",\"symbols\":[\"Purchase\",\"Sell\"]},\"doc\":\"Defines if it is purchase or sell contract\"},{\"name\":\"unitPrice\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Energy unit price\"},{\"name\":\"minPower\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal power for intervals\",\"default\":null},{\"name\":\"maxPower\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal power for intervals\",\"default\":null},{\"name\":\"minEnergy\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SumConstraintDto\",\"fields\":[{\"name\":\"startInterval\",\"type\":\"int\"},{\"name\":\"endInterval\",\"type\":\"int\"},{\"name\":\"sum\",\"type\":\"double\"}]}},\"doc\":\"Constraint on minimal energy over intervals range\",\"default\":[]},{\"name\":\"maxEnergy\",\"type\":{\"type\":\"array\",\"items\":\"SumConstraintDto\"},\"doc\":\"Constraint on maximal energy over intervals range\",\"default\":[]}]}]},\"doc\":\"List of electricity purchase and sell contracts.\",\"default\":[]},{\"name\":\"storages\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"StorageDto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"maxCharge\",\"type\":\"double\"},{\"name\":\"maxDischarge\",\"type\":\"double\"},{\"name\":\"maxCapacity\",\"type\":\"double\"},{\"name\":\"initialEnergy\",\"type\":\"double\"},{\"name\":\"minCharge\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal charging power for intervals\",\"default\":null},{\"name\":\"maxChargeConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal charging power for intervals\",\"default\":null},{\"name\":\"minDischargeConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal discharging power for intervals\",\"default\":null},{\"name\":\"maxDischargeConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal discharging power for intervals\",\"default\":null},{\"name\":\"minEnergyConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal stored energy for intervals\",\"default\":null},{\"name\":\"maxEnergyConstraints\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal stored energy power for intervals\",\"default\":null},{\"name\":\"forbiddenChargeIntervals\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Set of intervals at which charging is forbidden\",\"default\":[]},{\"name\":\"forbiddenDischargeIntervals\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"Set of intervals at which discharging is forbidden\",\"default\":[]}]}]},\"doc\":\"List of electric energy storages.\",\"default\":[]},{\"name\":\"movableDemands\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"MovableDemandDto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"profile\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"startIntervals\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}]},\"doc\":\"Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskDto> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskDto> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Task identifier */
  private long id;
  /** Time after which optimization has to stop. */
  private long timeoutSeconds;
  /** Relative gap below which optimization has to stop. */
  private double relativeGap;
  /** Time length of task intervals. */
  private java.util.List<java.lang.Double> intervals;
  /** PV installation power output. */
  private com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto production;
  /** Household power demand. */
  private com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto demand;
  /** List of electricity purchase and sell contracts. */
  private java.util.List<java.lang.Object> contracts;
  /** List of electric energy storages. */
  private java.util.List<java.lang.Object> storages;
  /** Defines demand that has fixed profile but its starting interval can be adjusted by optimizer. */
  private java.util.List<java.lang.Object> movableDemands;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskDto() {}

  /**
   * All-args constructor.
   * @param id Task identifier
   * @param timeoutSeconds Time after which optimization has to stop.
   * @param relativeGap Relative gap below which optimization has to stop.
   * @param intervals Time length of task intervals.
   * @param production PV installation power output.
   * @param demand Household power demand.
   * @param contracts List of electricity purchase and sell contracts.
   * @param storages List of electric energy storages.
   * @param movableDemands Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.
   */
  public TaskDto(java.lang.Long id, java.lang.Long timeoutSeconds, java.lang.Double relativeGap, java.util.List<java.lang.Double> intervals, com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto production, com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto demand, java.util.List<java.lang.Object> contracts, java.util.List<java.lang.Object> storages, java.util.List<java.lang.Object> movableDemands) {
    this.id = id;
    this.timeoutSeconds = timeoutSeconds;
    this.relativeGap = relativeGap;
    this.intervals = intervals;
    this.production = production;
    this.demand = demand;
    this.contracts = contracts;
    this.storages = storages;
    this.movableDemands = movableDemands;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return timeoutSeconds;
    case 2: return relativeGap;
    case 3: return intervals;
    case 4: return production;
    case 5: return demand;
    case 6: return contracts;
    case 7: return storages;
    case 8: return movableDemands;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: timeoutSeconds = (java.lang.Long)value$; break;
    case 2: relativeGap = (java.lang.Double)value$; break;
    case 3: intervals = (java.util.List<java.lang.Double>)value$; break;
    case 4: production = (com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto)value$; break;
    case 5: demand = (com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto)value$; break;
    case 6: contracts = (java.util.List<java.lang.Object>)value$; break;
    case 7: storages = (java.util.List<java.lang.Object>)value$; break;
    case 8: movableDemands = (java.util.List<java.lang.Object>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Task identifier
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Task identifier
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'timeoutSeconds' field.
   * @return Time after which optimization has to stop.
   */
  public long getTimeoutSeconds() {
    return timeoutSeconds;
  }


  /**
   * Sets the value of the 'timeoutSeconds' field.
   * Time after which optimization has to stop.
   * @param value the value to set.
   */
  public void setTimeoutSeconds(long value) {
    this.timeoutSeconds = value;
  }

  /**
   * Gets the value of the 'relativeGap' field.
   * @return Relative gap below which optimization has to stop.
   */
  public double getRelativeGap() {
    return relativeGap;
  }


  /**
   * Sets the value of the 'relativeGap' field.
   * Relative gap below which optimization has to stop.
   * @param value the value to set.
   */
  public void setRelativeGap(double value) {
    this.relativeGap = value;
  }

  /**
   * Gets the value of the 'intervals' field.
   * @return Time length of task intervals.
   */
  public java.util.List<java.lang.Double> getIntervals() {
    return intervals;
  }


  /**
   * Sets the value of the 'intervals' field.
   * Time length of task intervals.
   * @param value the value to set.
   */
  public void setIntervals(java.util.List<java.lang.Double> value) {
    this.intervals = value;
  }

  /**
   * Gets the value of the 'production' field.
   * @return PV installation power output.
   */
  public com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto getProduction() {
    return production;
  }


  /**
   * Sets the value of the 'production' field.
   * PV installation power output.
   * @param value the value to set.
   */
  public void setProduction(com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto value) {
    this.production = value;
  }

  /**
   * Gets the value of the 'demand' field.
   * @return Household power demand.
   */
  public com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto getDemand() {
    return demand;
  }


  /**
   * Sets the value of the 'demand' field.
   * Household power demand.
   * @param value the value to set.
   */
  public void setDemand(com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto value) {
    this.demand = value;
  }

  /**
   * Gets the value of the 'contracts' field.
   * @return List of electricity purchase and sell contracts.
   */
  public java.util.List<java.lang.Object> getContracts() {
    return contracts;
  }


  /**
   * Sets the value of the 'contracts' field.
   * List of electricity purchase and sell contracts.
   * @param value the value to set.
   */
  public void setContracts(java.util.List<java.lang.Object> value) {
    this.contracts = value;
  }

  /**
   * Gets the value of the 'storages' field.
   * @return List of electric energy storages.
   */
  public java.util.List<java.lang.Object> getStorages() {
    return storages;
  }


  /**
   * Sets the value of the 'storages' field.
   * List of electric energy storages.
   * @param value the value to set.
   */
  public void setStorages(java.util.List<java.lang.Object> value) {
    this.storages = value;
  }

  /**
   * Gets the value of the 'movableDemands' field.
   * @return Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.
   */
  public java.util.List<java.lang.Object> getMovableDemands() {
    return movableDemands;
  }


  /**
   * Sets the value of the 'movableDemands' field.
   * Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.
   * @param value the value to set.
   */
  public void setMovableDemands(java.util.List<java.lang.Object> value) {
    this.movableDemands = value;
  }

  /**
   * Creates a new TaskDto RecordBuilder.
   * @return A new TaskDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder();
  }

  /**
   * Creates a new TaskDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder(other);
    }
  }

  /**
   * Creates a new TaskDto RecordBuilder by copying an existing TaskDto instance.
   * @param other The existing instance to copy.
   * @return A new TaskDto RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskDto>
    implements org.apache.avro.data.RecordBuilder<TaskDto> {

    /** Task identifier */
    private long id;
    /** Time after which optimization has to stop. */
    private long timeoutSeconds;
    /** Relative gap below which optimization has to stop. */
    private double relativeGap;
    /** Time length of task intervals. */
    private java.util.List<java.lang.Double> intervals;
    /** PV installation power output. */
    private com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto production;
    private com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto.Builder productionBuilder;
    /** Household power demand. */
    private com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto demand;
    private com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto.Builder demandBuilder;
    /** List of electricity purchase and sell contracts. */
    private java.util.List<java.lang.Object> contracts;
    /** List of electric energy storages. */
    private java.util.List<java.lang.Object> storages;
    /** Defines demand that has fixed profile but its starting interval can be adjusted by optimizer. */
    private java.util.List<java.lang.Object> movableDemands;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timeoutSeconds)) {
        this.timeoutSeconds = data().deepCopy(fields()[1].schema(), other.timeoutSeconds);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.relativeGap)) {
        this.relativeGap = data().deepCopy(fields()[2].schema(), other.relativeGap);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.intervals)) {
        this.intervals = data().deepCopy(fields()[3].schema(), other.intervals);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.production)) {
        this.production = data().deepCopy(fields()[4].schema(), other.production);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasProductionBuilder()) {
        this.productionBuilder = com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto.newBuilder(other.getProductionBuilder());
      }
      if (isValidValue(fields()[5], other.demand)) {
        this.demand = data().deepCopy(fields()[5].schema(), other.demand);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasDemandBuilder()) {
        this.demandBuilder = com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto.newBuilder(other.getDemandBuilder());
      }
      if (isValidValue(fields()[6], other.contracts)) {
        this.contracts = data().deepCopy(fields()[6].schema(), other.contracts);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.storages)) {
        this.storages = data().deepCopy(fields()[7].schema(), other.storages);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.movableDemands)) {
        this.movableDemands = data().deepCopy(fields()[8].schema(), other.movableDemands);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeoutSeconds)) {
        this.timeoutSeconds = data().deepCopy(fields()[1].schema(), other.timeoutSeconds);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relativeGap)) {
        this.relativeGap = data().deepCopy(fields()[2].schema(), other.relativeGap);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.intervals)) {
        this.intervals = data().deepCopy(fields()[3].schema(), other.intervals);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.production)) {
        this.production = data().deepCopy(fields()[4].schema(), other.production);
        fieldSetFlags()[4] = true;
      }
      this.productionBuilder = null;
      if (isValidValue(fields()[5], other.demand)) {
        this.demand = data().deepCopy(fields()[5].schema(), other.demand);
        fieldSetFlags()[5] = true;
      }
      this.demandBuilder = null;
      if (isValidValue(fields()[6], other.contracts)) {
        this.contracts = data().deepCopy(fields()[6].schema(), other.contracts);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.storages)) {
        this.storages = data().deepCopy(fields()[7].schema(), other.storages);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.movableDemands)) {
        this.movableDemands = data().deepCopy(fields()[8].schema(), other.movableDemands);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Task identifier
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Task identifier
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Task identifier
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Task identifier
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeoutSeconds' field.
      * Time after which optimization has to stop.
      * @return The value.
      */
    public long getTimeoutSeconds() {
      return timeoutSeconds;
    }


    /**
      * Sets the value of the 'timeoutSeconds' field.
      * Time after which optimization has to stop.
      * @param value The value of 'timeoutSeconds'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setTimeoutSeconds(long value) {
      validate(fields()[1], value);
      this.timeoutSeconds = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeoutSeconds' field has been set.
      * Time after which optimization has to stop.
      * @return True if the 'timeoutSeconds' field has been set, false otherwise.
      */
    public boolean hasTimeoutSeconds() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeoutSeconds' field.
      * Time after which optimization has to stop.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearTimeoutSeconds() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'relativeGap' field.
      * Relative gap below which optimization has to stop.
      * @return The value.
      */
    public double getRelativeGap() {
      return relativeGap;
    }


    /**
      * Sets the value of the 'relativeGap' field.
      * Relative gap below which optimization has to stop.
      * @param value The value of 'relativeGap'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setRelativeGap(double value) {
      validate(fields()[2], value);
      this.relativeGap = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'relativeGap' field has been set.
      * Relative gap below which optimization has to stop.
      * @return True if the 'relativeGap' field has been set, false otherwise.
      */
    public boolean hasRelativeGap() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'relativeGap' field.
      * Relative gap below which optimization has to stop.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearRelativeGap() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'intervals' field.
      * Time length of task intervals.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getIntervals() {
      return intervals;
    }


    /**
      * Sets the value of the 'intervals' field.
      * Time length of task intervals.
      * @param value The value of 'intervals'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setIntervals(java.util.List<java.lang.Double> value) {
      validate(fields()[3], value);
      this.intervals = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'intervals' field has been set.
      * Time length of task intervals.
      * @return True if the 'intervals' field has been set, false otherwise.
      */
    public boolean hasIntervals() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'intervals' field.
      * Time length of task intervals.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearIntervals() {
      intervals = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'production' field.
      * PV installation power output.
      * @return The value.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto getProduction() {
      return production;
    }


    /**
      * Sets the value of the 'production' field.
      * PV installation power output.
      * @param value The value of 'production'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setProduction(com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto value) {
      validate(fields()[4], value);
      this.productionBuilder = null;
      this.production = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'production' field has been set.
      * PV installation power output.
      * @return True if the 'production' field has been set, false otherwise.
      */
    public boolean hasProduction() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'production' field and creates one if it doesn't exist yet.
     * PV installation power output.
     * @return This builder.
     */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto.Builder getProductionBuilder() {
      if (productionBuilder == null) {
        if (hasProduction()) {
          setProductionBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto.newBuilder(production));
        } else {
          setProductionBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto.newBuilder());
        }
      }
      return productionBuilder;
    }

    /**
     * Sets the Builder instance for the 'production' field
     * PV installation power output.
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setProductionBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto.Builder value) {
      clearProduction();
      productionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'production' field has an active Builder instance
     * PV installation power output.
     * @return True if the 'production' field has an active Builder instance
     */
    public boolean hasProductionBuilder() {
      return productionBuilder != null;
    }

    /**
      * Clears the value of the 'production' field.
      * PV installation power output.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearProduction() {
      production = null;
      productionBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'demand' field.
      * Household power demand.
      * @return The value.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto getDemand() {
      return demand;
    }


    /**
      * Sets the value of the 'demand' field.
      * Household power demand.
      * @param value The value of 'demand'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setDemand(com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto value) {
      validate(fields()[5], value);
      this.demandBuilder = null;
      this.demand = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'demand' field has been set.
      * Household power demand.
      * @return True if the 'demand' field has been set, false otherwise.
      */
    public boolean hasDemand() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'demand' field and creates one if it doesn't exist yet.
     * Household power demand.
     * @return This builder.
     */
    public com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto.Builder getDemandBuilder() {
      if (demandBuilder == null) {
        if (hasDemand()) {
          setDemandBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto.newBuilder(demand));
        } else {
          setDemandBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto.newBuilder());
        }
      }
      return demandBuilder;
    }

    /**
     * Sets the Builder instance for the 'demand' field
     * Household power demand.
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setDemandBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto.Builder value) {
      clearDemand();
      demandBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'demand' field has an active Builder instance
     * Household power demand.
     * @return True if the 'demand' field has an active Builder instance
     */
    public boolean hasDemandBuilder() {
      return demandBuilder != null;
    }

    /**
      * Clears the value of the 'demand' field.
      * Household power demand.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearDemand() {
      demand = null;
      demandBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'contracts' field.
      * List of electricity purchase and sell contracts.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getContracts() {
      return contracts;
    }


    /**
      * Sets the value of the 'contracts' field.
      * List of electricity purchase and sell contracts.
      * @param value The value of 'contracts'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setContracts(java.util.List<java.lang.Object> value) {
      validate(fields()[6], value);
      this.contracts = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'contracts' field has been set.
      * List of electricity purchase and sell contracts.
      * @return True if the 'contracts' field has been set, false otherwise.
      */
    public boolean hasContracts() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'contracts' field.
      * List of electricity purchase and sell contracts.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearContracts() {
      contracts = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'storages' field.
      * List of electric energy storages.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getStorages() {
      return storages;
    }


    /**
      * Sets the value of the 'storages' field.
      * List of electric energy storages.
      * @param value The value of 'storages'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setStorages(java.util.List<java.lang.Object> value) {
      validate(fields()[7], value);
      this.storages = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'storages' field has been set.
      * List of electric energy storages.
      * @return True if the 'storages' field has been set, false otherwise.
      */
    public boolean hasStorages() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'storages' field.
      * List of electric energy storages.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearStorages() {
      storages = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'movableDemands' field.
      * Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getMovableDemands() {
      return movableDemands;
    }


    /**
      * Sets the value of the 'movableDemands' field.
      * Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.
      * @param value The value of 'movableDemands'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder setMovableDemands(java.util.List<java.lang.Object> value) {
      validate(fields()[8], value);
      this.movableDemands = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'movableDemands' field has been set.
      * Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.
      * @return True if the 'movableDemands' field has been set, false otherwise.
      */
    public boolean hasMovableDemands() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'movableDemands' field.
      * Defines demand that has fixed profile but its starting interval can be adjusted by optimizer.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.TaskDto.Builder clearMovableDemands() {
      movableDemands = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskDto build() {
      try {
        TaskDto record = new TaskDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.timeoutSeconds = fieldSetFlags()[1] ? this.timeoutSeconds : (java.lang.Long) defaultValue(fields()[1]);
        record.relativeGap = fieldSetFlags()[2] ? this.relativeGap : (java.lang.Double) defaultValue(fields()[2]);
        record.intervals = fieldSetFlags()[3] ? this.intervals : (java.util.List<java.lang.Double>) defaultValue(fields()[3]);
        if (productionBuilder != null) {
          try {
            record.production = this.productionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("production"));
            throw e;
          }
        } else {
          record.production = fieldSetFlags()[4] ? this.production : (com.github.kacperpotapczyk.pvoptimizer.dto.ProductionDto) defaultValue(fields()[4]);
        }
        if (demandBuilder != null) {
          try {
            record.demand = this.demandBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("demand"));
            throw e;
          }
        } else {
          record.demand = fieldSetFlags()[5] ? this.demand : (com.github.kacperpotapczyk.pvoptimizer.dto.DemandDto) defaultValue(fields()[5]);
        }
        record.contracts = fieldSetFlags()[6] ? this.contracts : (java.util.List<java.lang.Object>) defaultValue(fields()[6]);
        record.storages = fieldSetFlags()[7] ? this.storages : (java.util.List<java.lang.Object>) defaultValue(fields()[7]);
        record.movableDemands = fieldSetFlags()[8] ? this.movableDemands : (java.util.List<java.lang.Object>) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskDto>
    READER$ = (org.apache.avro.io.DatumReader<TaskDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










