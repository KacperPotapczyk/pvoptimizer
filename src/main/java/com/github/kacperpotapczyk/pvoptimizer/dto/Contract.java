/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.kacperpotapczyk.pvoptimizer.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Contract extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5108909788327928133L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contract\",\"namespace\":\"com.github.kacperpotapczyk.pvoptimizer.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Contract id\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Contract name\"},{\"name\":\"contractDirection\",\"type\":{\"type\":\"enum\",\"name\":\"ContractDirection\",\"symbols\":[\"Purchase\",\"Sell\"]},\"doc\":\"Defines if it is purchase or sell contract\"},{\"name\":\"unitPrice\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Energy unit price\"},{\"name\":\"minPower\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on minimal power for intervals\",\"default\":null},{\"name\":\"maxPower\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"doc\":\"Constraints on maximal power for intervals\",\"default\":null},{\"name\":\"minEnergy\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SumConstraint\",\"fields\":[{\"name\":\"startInterval\",\"type\":\"int\"},{\"name\":\"endInterval\",\"type\":\"int\"},{\"name\":\"sum\",\"type\":\"double\"}]}},\"doc\":\"Constraint on minimal energy over intervals range\",\"default\":[]},{\"name\":\"maxEnergy\",\"type\":{\"type\":\"array\",\"items\":\"SumConstraint\"},\"doc\":\"Constraint on maximal energy over intervals range\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Contract> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Contract> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Contract> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Contract> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Contract> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Contract to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Contract from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Contract instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Contract fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Contract id */
  private long id;
  /** Contract name */
  private java.lang.CharSequence name;
  /** Defines if it is purchase or sell contract */
  private com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection contractDirection;
  /** Energy unit price */
  private java.util.List<java.lang.Double> unitPrice;
  /** Constraints on minimal power for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> minPower;
  /** Constraints on maximal power for intervals */
  private java.util.Map<java.lang.CharSequence,java.lang.Double> maxPower;
  /** Constraint on minimal energy over intervals range */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> minEnergy;
  /** Constraint on maximal energy over intervals range */
  private java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> maxEnergy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Contract() {}

  /**
   * All-args constructor.
   * @param id Contract id
   * @param name Contract name
   * @param contractDirection Defines if it is purchase or sell contract
   * @param unitPrice Energy unit price
   * @param minPower Constraints on minimal power for intervals
   * @param maxPower Constraints on maximal power for intervals
   * @param minEnergy Constraint on minimal energy over intervals range
   * @param maxEnergy Constraint on maximal energy over intervals range
   */
  public Contract(java.lang.Long id, java.lang.CharSequence name, com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection contractDirection, java.util.List<java.lang.Double> unitPrice, java.util.Map<java.lang.CharSequence,java.lang.Double> minPower, java.util.Map<java.lang.CharSequence,java.lang.Double> maxPower, java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> minEnergy, java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> maxEnergy) {
    this.id = id;
    this.name = name;
    this.contractDirection = contractDirection;
    this.unitPrice = unitPrice;
    this.minPower = minPower;
    this.maxPower = maxPower;
    this.minEnergy = minEnergy;
    this.maxEnergy = maxEnergy;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return contractDirection;
    case 3: return unitPrice;
    case 4: return minPower;
    case 5: return maxPower;
    case 6: return minEnergy;
    case 7: return maxEnergy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: contractDirection = (com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection)value$; break;
    case 3: unitPrice = (java.util.List<java.lang.Double>)value$; break;
    case 4: minPower = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 5: maxPower = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 6: minEnergy = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>)value$; break;
    case 7: maxEnergy = (java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Contract id
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Contract id
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Contract name
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Contract name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'contractDirection' field.
   * @return Defines if it is purchase or sell contract
   */
  public com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection getContractDirection() {
    return contractDirection;
  }


  /**
   * Sets the value of the 'contractDirection' field.
   * Defines if it is purchase or sell contract
   * @param value the value to set.
   */
  public void setContractDirection(com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection value) {
    this.contractDirection = value;
  }

  /**
   * Gets the value of the 'unitPrice' field.
   * @return Energy unit price
   */
  public java.util.List<java.lang.Double> getUnitPrice() {
    return unitPrice;
  }


  /**
   * Sets the value of the 'unitPrice' field.
   * Energy unit price
   * @param value the value to set.
   */
  public void setUnitPrice(java.util.List<java.lang.Double> value) {
    this.unitPrice = value;
  }

  /**
   * Gets the value of the 'minPower' field.
   * @return Constraints on minimal power for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinPower() {
    return minPower;
  }


  /**
   * Sets the value of the 'minPower' field.
   * Constraints on minimal power for intervals
   * @param value the value to set.
   */
  public void setMinPower(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.minPower = value;
  }

  /**
   * Gets the value of the 'maxPower' field.
   * @return Constraints on maximal power for intervals
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxPower() {
    return maxPower;
  }


  /**
   * Sets the value of the 'maxPower' field.
   * Constraints on maximal power for intervals
   * @param value the value to set.
   */
  public void setMaxPower(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.maxPower = value;
  }

  /**
   * Gets the value of the 'minEnergy' field.
   * @return Constraint on minimal energy over intervals range
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> getMinEnergy() {
    return minEnergy;
  }


  /**
   * Sets the value of the 'minEnergy' field.
   * Constraint on minimal energy over intervals range
   * @param value the value to set.
   */
  public void setMinEnergy(java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> value) {
    this.minEnergy = value;
  }

  /**
   * Gets the value of the 'maxEnergy' field.
   * @return Constraint on maximal energy over intervals range
   */
  public java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> getMaxEnergy() {
    return maxEnergy;
  }


  /**
   * Sets the value of the 'maxEnergy' field.
   * Constraint on maximal energy over intervals range
   * @param value the value to set.
   */
  public void setMaxEnergy(java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> value) {
    this.maxEnergy = value;
  }

  /**
   * Creates a new Contract RecordBuilder.
   * @return A new Contract RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder newBuilder() {
    return new com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder();
  }

  /**
   * Creates a new Contract RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Contract RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder(other);
    }
  }

  /**
   * Creates a new Contract RecordBuilder by copying an existing Contract instance.
   * @param other The existing instance to copy.
   * @return A new Contract RecordBuilder
   */
  public static com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder newBuilder(com.github.kacperpotapczyk.pvoptimizer.dto.Contract other) {
    if (other == null) {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder();
    } else {
      return new com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder(other);
    }
  }

  /**
   * RecordBuilder for Contract instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contract>
    implements org.apache.avro.data.RecordBuilder<Contract> {

    /** Contract id */
    private long id;
    /** Contract name */
    private java.lang.CharSequence name;
    /** Defines if it is purchase or sell contract */
    private com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection contractDirection;
    /** Energy unit price */
    private java.util.List<java.lang.Double> unitPrice;
    /** Constraints on minimal power for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> minPower;
    /** Constraints on maximal power for intervals */
    private java.util.Map<java.lang.CharSequence,java.lang.Double> maxPower;
    /** Constraint on minimal energy over intervals range */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> minEnergy;
    /** Constraint on maximal energy over intervals range */
    private java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> maxEnergy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.contractDirection)) {
        this.contractDirection = data().deepCopy(fields()[2].schema(), other.contractDirection);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[3].schema(), other.unitPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.minPower)) {
        this.minPower = data().deepCopy(fields()[4].schema(), other.minPower);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.maxPower)) {
        this.maxPower = data().deepCopy(fields()[5].schema(), other.maxPower);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.minEnergy)) {
        this.minEnergy = data().deepCopy(fields()[6].schema(), other.minEnergy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.maxEnergy)) {
        this.maxEnergy = data().deepCopy(fields()[7].schema(), other.maxEnergy);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Contract instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.kacperpotapczyk.pvoptimizer.dto.Contract other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contractDirection)) {
        this.contractDirection = data().deepCopy(fields()[2].schema(), other.contractDirection);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[3].schema(), other.unitPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.minPower)) {
        this.minPower = data().deepCopy(fields()[4].schema(), other.minPower);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxPower)) {
        this.maxPower = data().deepCopy(fields()[5].schema(), other.maxPower);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.minEnergy)) {
        this.minEnergy = data().deepCopy(fields()[6].schema(), other.minEnergy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.maxEnergy)) {
        this.maxEnergy = data().deepCopy(fields()[7].schema(), other.maxEnergy);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Contract id
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Contract id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Contract id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Contract id
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Contract name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Contract name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Contract name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Contract name
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'contractDirection' field.
      * Defines if it is purchase or sell contract
      * @return The value.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection getContractDirection() {
      return contractDirection;
    }


    /**
      * Sets the value of the 'contractDirection' field.
      * Defines if it is purchase or sell contract
      * @param value The value of 'contractDirection'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setContractDirection(com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection value) {
      validate(fields()[2], value);
      this.contractDirection = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'contractDirection' field has been set.
      * Defines if it is purchase or sell contract
      * @return True if the 'contractDirection' field has been set, false otherwise.
      */
    public boolean hasContractDirection() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'contractDirection' field.
      * Defines if it is purchase or sell contract
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearContractDirection() {
      contractDirection = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitPrice' field.
      * Energy unit price
      * @return The value.
      */
    public java.util.List<java.lang.Double> getUnitPrice() {
      return unitPrice;
    }


    /**
      * Sets the value of the 'unitPrice' field.
      * Energy unit price
      * @param value The value of 'unitPrice'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setUnitPrice(java.util.List<java.lang.Double> value) {
      validate(fields()[3], value);
      this.unitPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'unitPrice' field has been set.
      * Energy unit price
      * @return True if the 'unitPrice' field has been set, false otherwise.
      */
    public boolean hasUnitPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'unitPrice' field.
      * Energy unit price
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearUnitPrice() {
      unitPrice = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'minPower' field.
      * Constraints on minimal power for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMinPower() {
      return minPower;
    }


    /**
      * Sets the value of the 'minPower' field.
      * Constraints on minimal power for intervals
      * @param value The value of 'minPower'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setMinPower(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[4], value);
      this.minPower = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'minPower' field has been set.
      * Constraints on minimal power for intervals
      * @return True if the 'minPower' field has been set, false otherwise.
      */
    public boolean hasMinPower() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'minPower' field.
      * Constraints on minimal power for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearMinPower() {
      minPower = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxPower' field.
      * Constraints on maximal power for intervals
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMaxPower() {
      return maxPower;
    }


    /**
      * Sets the value of the 'maxPower' field.
      * Constraints on maximal power for intervals
      * @param value The value of 'maxPower'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setMaxPower(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[5], value);
      this.maxPower = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'maxPower' field has been set.
      * Constraints on maximal power for intervals
      * @return True if the 'maxPower' field has been set, false otherwise.
      */
    public boolean hasMaxPower() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'maxPower' field.
      * Constraints on maximal power for intervals
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearMaxPower() {
      maxPower = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'minEnergy' field.
      * Constraint on minimal energy over intervals range
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> getMinEnergy() {
      return minEnergy;
    }


    /**
      * Sets the value of the 'minEnergy' field.
      * Constraint on minimal energy over intervals range
      * @param value The value of 'minEnergy'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setMinEnergy(java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> value) {
      validate(fields()[6], value);
      this.minEnergy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'minEnergy' field has been set.
      * Constraint on minimal energy over intervals range
      * @return True if the 'minEnergy' field has been set, false otherwise.
      */
    public boolean hasMinEnergy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'minEnergy' field.
      * Constraint on minimal energy over intervals range
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearMinEnergy() {
      minEnergy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxEnergy' field.
      * Constraint on maximal energy over intervals range
      * @return The value.
      */
    public java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> getMaxEnergy() {
      return maxEnergy;
    }


    /**
      * Sets the value of the 'maxEnergy' field.
      * Constraint on maximal energy over intervals range
      * @param value The value of 'maxEnergy'.
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder setMaxEnergy(java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> value) {
      validate(fields()[7], value);
      this.maxEnergy = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'maxEnergy' field has been set.
      * Constraint on maximal energy over intervals range
      * @return True if the 'maxEnergy' field has been set, false otherwise.
      */
    public boolean hasMaxEnergy() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'maxEnergy' field.
      * Constraint on maximal energy over intervals range
      * @return This builder.
      */
    public com.github.kacperpotapczyk.pvoptimizer.dto.Contract.Builder clearMaxEnergy() {
      maxEnergy = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Contract build() {
      try {
        Contract record = new Contract();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.contractDirection = fieldSetFlags()[2] ? this.contractDirection : (com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection) defaultValue(fields()[2]);
        record.unitPrice = fieldSetFlags()[3] ? this.unitPrice : (java.util.List<java.lang.Double>) defaultValue(fields()[3]);
        record.minPower = fieldSetFlags()[4] ? this.minPower : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[4]);
        record.maxPower = fieldSetFlags()[5] ? this.maxPower : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[5]);
        record.minEnergy = fieldSetFlags()[6] ? this.minEnergy : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>) defaultValue(fields()[6]);
        record.maxEnergy = fieldSetFlags()[7] ? this.maxEnergy : (java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Contract>
    WRITER$ = (org.apache.avro.io.DatumWriter<Contract>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Contract>
    READER$ = (org.apache.avro.io.DatumReader<Contract>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

    out.writeEnum(this.contractDirection.ordinal());

    long size0 = this.unitPrice.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Double e0: this.unitPrice) {
      actualSize0++;
      out.startItem();
      out.writeDouble(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.minPower == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.minPower.size();
      out.writeMapStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e1: this.minPower.entrySet()) {
        actualSize1++;
        out.startItem();
        out.writeString(e1.getKey());
        java.lang.Double v1 = e1.getValue();
        out.writeDouble(v1);
      }
      out.writeMapEnd();
      if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.maxPower == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.maxPower.size();
      out.writeMapStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e2: this.maxPower.entrySet()) {
        actualSize2++;
        out.startItem();
        out.writeString(e2.getKey());
        java.lang.Double v2 = e2.getValue();
        out.writeDouble(v2);
      }
      out.writeMapEnd();
      if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    long size3 = this.minEnergy.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint e3: this.minEnergy) {
      actualSize3++;
      out.startItem();
      e3.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.maxEnergy.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint e4: this.maxEnergy) {
      actualSize4++;
      out.startItem();
      e4.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.contractDirection = com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection.values()[in.readEnum()];

      long size0 = in.readArrayStart();
      java.util.List<java.lang.Double> a0 = this.unitPrice;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("unitPrice").schema());
        this.unitPrice = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readDouble();
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.minPower = null;
      } else {
        long size1 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m1 = this.minPower; // Need fresh name due to limitation of macro system
        if (m1 == null) {
          m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size1);
          this.minPower = m1;
        } else m1.clear();
        for ( ; 0 < size1; size1 = in.mapNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence k1 = null;
            k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
            java.lang.Double v1 = null;
            v1 = in.readDouble();
            m1.put(k1, v1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxPower = null;
      } else {
        long size2 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m2 = this.maxPower; // Need fresh name due to limitation of macro system
        if (m2 == null) {
          m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size2);
          this.maxPower = m2;
        } else m2.clear();
        for ( ; 0 < size2; size2 = in.mapNext()) {
          for ( ; size2 != 0; size2--) {
            java.lang.CharSequence k2 = null;
            k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
            java.lang.Double v2 = null;
            v2 = in.readDouble();
            m2.put(k2, v2);
          }
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> a3 = this.minEnergy;
      if (a3 == null) {
        a3 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>((int)size3, SCHEMA$.getField("minEnergy").schema());
        this.minEnergy = a3;
      } else a3.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint e3 = (ga3 != null ? ga3.peek() : null);
          if (e3 == null) {
            e3 = new com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint();
          }
          e3.customDecode(in);
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> a4 = this.maxEnergy;
      if (a4 == null) {
        a4 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>((int)size4, SCHEMA$.getField("maxEnergy").schema());
        this.maxEnergy = a4;
      } else a4.clear();
      SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint e4 = (ga4 != null ? ga4.peek() : null);
          if (e4 == null) {
            e4 = new com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint();
          }
          e4.customDecode(in);
          a4.add(e4);
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.contractDirection = com.github.kacperpotapczyk.pvoptimizer.dto.ContractDirection.values()[in.readEnum()];
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Double> a0 = this.unitPrice;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("unitPrice").schema());
            this.unitPrice = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readDouble();
              a0.add(e0);
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.minPower = null;
          } else {
            long size1 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m1 = this.minPower; // Need fresh name due to limitation of macro system
            if (m1 == null) {
              m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size1);
              this.minPower = m1;
            } else m1.clear();
            for ( ; 0 < size1; size1 = in.mapNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence k1 = null;
                k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
                java.lang.Double v1 = null;
                v1 = in.readDouble();
                m1.put(k1, v1);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxPower = null;
          } else {
            long size2 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m2 = this.maxPower; // Need fresh name due to limitation of macro system
            if (m2 == null) {
              m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size2);
              this.maxPower = m2;
            } else m2.clear();
            for ( ; 0 < size2; size2 = in.mapNext()) {
              for ( ; size2 != 0; size2--) {
                java.lang.CharSequence k2 = null;
                k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
                java.lang.Double v2 = null;
                v2 = in.readDouble();
                m2.put(k2, v2);
              }
            }
          }
          break;

        case 6:
          long size3 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> a3 = this.minEnergy;
          if (a3 == null) {
            a3 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>((int)size3, SCHEMA$.getField("minEnergy").schema());
            this.minEnergy = a3;
          } else a3.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint e3 = (ga3 != null ? ga3.peek() : null);
              if (e3 == null) {
                e3 = new com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint();
              }
              e3.customDecode(in);
              a3.add(e3);
            }
          }
          break;

        case 7:
          long size4 = in.readArrayStart();
          java.util.List<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> a4 = this.maxEnergy;
          if (a4 == null) {
            a4 = new SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>((int)size4, SCHEMA$.getField("maxEnergy").schema());
            this.maxEnergy = a4;
          } else a4.clear();
          SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint e4 = (ga4 != null ? ga4.peek() : null);
              if (e4 == null) {
                e4 = new com.github.kacperpotapczyk.pvoptimizer.dto.SumConstraint();
              }
              e4.customDecode(in);
              a4.add(e4);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










